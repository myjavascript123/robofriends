{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","container/ErrorBoundary.js","container/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","name","id","email","className","alt","src","CardList","cardComponent","robots","map","cardItem","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","h","React","Component","App","onSearchChange","event","searchText","target","value","fetch","then","res","json","results","searchResults","filter","user","toLowerCase","includes","length","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"sMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCCHSC,EAbF,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,KAAKC,EAAc,EAAdA,GAAGC,EAAW,EAAXA,MAEnB,OACI,yBAAKC,UAAU,gDACX,yBAAKC,IAAI,SAASC,IAAG,+BAA0BJ,EAA1B,cACrB,6BACI,4BAAKD,GACL,2BAAIE,MCeLI,EApBE,SAAC,GAAc,IACtBC,EADqB,EAAZC,OACcC,KAAI,SAACC,GAC9B,OACI,kBAAC,EAAD,CACIC,IAAKD,EAAST,GACdA,GAAIS,EAAST,GACbD,KAAMU,EAASV,KACfE,MAAOQ,EAASR,WAK5B,OACI,6BACGK,ICHIK,EAbG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,yBAAKV,UAAU,OACX,2BACIA,UAAU,mCACVW,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCCXI,G,MARA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,UAAU,SAASC,OAAO,kBAAkBC,OAAO,UAC3DJ,EAAMK,YCcJC,E,kDAfX,WAAYN,GAAQ,IAAD,8BACf,cAAMA,IACDO,MAAQ,CAAEC,UAAS,GAFT,E,8DAIDC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAS,M,6BAErBK,GACH,OAAGF,KAAKH,SACG,gEAEJG,KAAKX,MAAMK,a,GAZES,IAAMC,WC2CnBC,E,kDArCX,aAAe,IAAD,8BACX,gBAaHC,eAAiB,SAACC,GACd,EAAKN,SAAS,CAACO,WAAWD,EAAME,OAAOC,SAbxC,EAAKd,MAAQ,CACTjB,OAAO,GACP6B,WAAW,IAJJ,E,gEAQM,IAAD,OACfG,MAAM,8CACDC,MAAK,SAACC,GAAD,OAAOA,EAAIC,UAChBF,MAAK,SAAAG,GAAO,OAAI,EAAKd,SAAS,CAAEtB,OAAOoC,S,6BAOzCb,GAAI,IAAD,EACsBF,KAAKJ,MAA1BjB,EADD,EACCA,OAAO6B,EADR,EACQA,WACRQ,EAAgBrC,EAAOsC,QAAO,SAACC,GACjC,OAAOA,EAAK/C,KAAKgD,cAAcC,SAASZ,EAAWW,kBAEvD,OAAQxC,EAAO0C,OACX,yBAAK/C,UAAU,MACX,wBAAIA,UAAU,MAAd,gBACA,kBAAC,EAAD,CAAWU,aAAcgB,KAAKM,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAU3B,OAAQqC,OANV,8C,GAxBdZ,aCClBkB,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SPwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhB,MAAK,SAAAiB,GACJA,EAAaC,gBAEdC,OAAM,SAAAjC,GACLkC,QAAQlC,MAAMA,EAAMmC,a","file":"static/js/main.acc8af4f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\nconst Card = ({name,id,email}) => {\r\n    \r\n    return (\r\n        <div className='bg-light-green dib br3 pa3 ma2 grow shadow-5'>\r\n            <img alt='robots' src={`https://robohash.org/${id}?200x200`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card'\r\n\r\n\r\nconst CardList = ({robots}) => {\r\n    const cardComponent = robots.map((cardItem)=> {\r\n        return (\r\n            <Card  \r\n                key={cardItem.id} \r\n                id={cardItem.id} \r\n                name={cardItem.name} \r\n                email={cardItem.email} \r\n                />\r\n        ); \r\n    });\r\n    \r\n    return (\r\n        <div>\r\n          {cardComponent}\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default CardList;","import React from 'react'\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n    return (\r\n        <div className=\"pa2\">\r\n            <input \r\n                className=\"pa3 ba b--green bg-lightest-blue\"\r\n                type=\"search\" \r\n                placeholder=\"search robots\" \r\n                onChange={searchChange}>\r\n            </input>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY:'scroll',border:'1px solid black',height:'500px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React from 'react'\r\n\r\n\r\nclass ErrorBoundary extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { hasError:false};\r\n    }\r\n    componentDidCatch(error, info) {\r\n        this.setState({hasError:true});\r\n    }\r\n    render(h) {\r\n        if(this.hasError) {\r\n            return <h1>Ooops Some error has occured.???</h1>    \r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React,{Component} from 'react'\r\nimport CardList from '../components/CardList'\r\nimport SearchBox from '../components/SearchBox'\r\nimport './App.css'\r\nimport Scroll from '../components/Scroll'\r\nimport ErrorBoundary from './ErrorBoundary'\r\n\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n       super();\r\n       this.state = {\r\n           robots:[],\r\n           searchText:''\r\n       } \r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then((res)=>res.json())\r\n            .then(results => this.setState({ robots:results })) \r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({searchText:event.target.value});\r\n    }\r\n\r\n    render(h) {\r\n        const {robots,searchText} = this.state;\r\n        const searchResults = robots.filter((user)=> {\r\n            return user.name.toLowerCase().includes(searchText.toLowerCase());\r\n        })\r\n        return !robots.length ? <h1>Loading...</h1>:(\r\n            <div className=\"tc\">\r\n                <h1 className='f1'>RobotFriends</h1>\r\n                <SearchBox searchChange={this.onSearchChange}/>\r\n                <Scroll>\r\n                    <ErrorBoundary>\r\n                        <CardList robots={searchResults} />\r\n                    </ErrorBoundary>\r\n                </Scroll>\r\n            </div>\r\n        );    \r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons'\nimport App from './container/App';\n\n\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}